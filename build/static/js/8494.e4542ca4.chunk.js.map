{"version":3,"file":"static/js/8494.e4542ca4.chunk.js","mappings":"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","sources":["sections/auth/jwt/jwt-login-view.js","sections/auth/jwt/jwt-register-view.js","sections/auth/jwt/jwt-forgot-password-view.js","sections/auth/jwt/jwt-reset-password-view.js","sections/auth/jwt/jwt-verify-view.js","sections/auth/jwt/jwt-otp-verification-view.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useState } from \"react\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\n// routes\r\nimport { paths } from \"src/routes/paths\";\r\nimport { RouterLink } from \"src/routes/components\";\r\nimport { useSearchParams, useRouter } from \"src/routes/hooks\";\r\n// config\r\nimport { PATH_AFTER_LOGIN } from \"src/config-global\";\r\n// hooks\r\nimport { useBoolean } from \"src/hooks/use-boolean\";\r\nimport { useSnackbar } from \"src/components/snackbar\";\r\n\r\n// auth\r\nimport { useAuthContext } from \"src/auth/hooks\";\r\n// components\r\nimport Iconify from \"src/components/iconify\";\r\nimport FormProvider, { RHFTextField } from \"src/components/hook-form\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JwtLoginView() {\r\n  const { login } = useAuthContext();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const router = useRouter();\r\n\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n  const searchParams = useSearchParams();\r\n\r\n  const returnTo = searchParams.get(\"returnTo\");\r\n\r\n  const password = useBoolean();\r\n\r\n  const LoginSchema = Yup.object().shape({\r\n    email: Yup.string().required(\"Email Or Phone Number is required\"),\r\n    password: Yup.string().required(\"Password is required\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(LoginSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      const res = await login?.(data.email, data.password);\r\n\r\n      const { onBoarding } = res.data.data;\r\n      if (onBoarding !== \"completed\") {\r\n        router.push(paths.onboarding);\r\n      } else {\r\n        router.push(paths.dashboard.root);\r\n      }\r\n    } catch (error) {\r\n      enqueueSnackbar(error.response.data.message);\r\n      reset();\r\n    }\r\n  });\r\n\r\n  const renderHead = (\r\n    <Stack spacing={2} sx={{ mb: 5 }}>\r\n      <Typography variant=\"h4\">Sign in to Telical</Typography>\r\n\r\n      <Stack direction=\"row\" spacing={0.5}>\r\n        <Typography variant=\"body2\">New user?</Typography>\r\n\r\n        <Link\r\n          component={RouterLink}\r\n          href={paths.auth.jwt.register}\r\n          variant=\"subtitle2\"\r\n        >\r\n          Create an account\r\n        </Link>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  const renderForm = (\r\n    <Stack spacing={2.5}>\r\n      {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n\r\n      <RHFTextField name=\"email\" label=\"Email address or Phone Number\" />\r\n\r\n      <RHFTextField\r\n        name=\"password\"\r\n        label=\"Password\"\r\n        type={password.value ? \"text\" : \"password\"}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton onClick={password.onToggle} edge=\"end\">\r\n                <Iconify\r\n                  icon={\r\n                    password.value ? \"solar:eye-bold\" : \"solar:eye-closed-bold\"\r\n                  }\r\n                />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      <Link\r\n        variant=\"body2\"\r\n        color=\"inherit\"\r\n        underline=\"always\"\r\n        sx={{ alignSelf: \"flex-end\" }}\r\n        href=\"forgot-password\"\r\n      >\r\n        Forgot password?\r\n      </Link>\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        color=\"inherit\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n      >\r\n        Login\r\n      </LoadingButton>\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={onSubmit}>\r\n      {renderHead}\r\n\r\n      {renderForm}\r\n    </FormProvider>\r\n  );\r\n}\r\n","import * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Autocomplete, Select, Grid, MenuItem } from \"@mui/material\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\n\r\n// assets\r\nimport { countries } from \"src/assets/data\";\r\n// hooks\r\nimport { useBoolean } from \"src/hooks/use-boolean\";\r\n// routes\r\nimport { paths } from \"src/routes/paths\";\r\nimport { RouterLink } from \"src/routes/components\";\r\nimport { useSearchParams, useRouter } from \"src/routes/hooks\";\r\n// config\r\nimport { PATH_AFTER_LOGIN } from \"src/config-global\";\r\nimport { useSnackbar } from \"src/components/snackbar\";\r\n\r\n// auth\r\nimport { useAuthContext } from \"src/auth/hooks\";\r\n// components\r\nimport Iconify from \"src/components/iconify\";\r\nimport FormProvider, { RHFTextField } from \"src/components/hook-form\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JwtRegisterView() {\r\n  const { register } = useAuthContext();\r\n\r\n  const router = useRouter();\r\n\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n  const searchParams = useSearchParams();\r\n\r\n  const returnTo = searchParams.get(\"returnTo\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const password = useBoolean();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    firstName: Yup.string().required(\"First name required\"),\r\n    lastName: Yup.string().required(\"Last name required\"),\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email must be a valid email address\"),\r\n    password: Yup.string().required(\"Password is required\"),\r\n    confirmPassword: Yup.string().required(\"Confirm Password is required\"),\r\n    phone: Yup.string()\r\n      .required(\"Phone number is required\")\r\n      .matches(/^\\+\\d+(\\s\\d+)*$/, \"Invalid phone number\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    phone: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(RegisterSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  useEffect(() => {\r\n    const selectedCountryData = countries.find(\r\n      (country) => country.code === selectedCountry\r\n    );\r\n    if (selectedCountryData) {\r\n      methods.setValue(\"phone\", `+${selectedCountryData.phone} `);\r\n    }\r\n  }, [selectedCountry, methods]);\r\n\r\n  // const onSubmit = handleSubmit(async (data) => {\r\n  //   try {\r\n  //     if (data.password === data.confirmPassword) {\r\n  //       await register?.(data.email, data.password, data.firstName, data.lastName, data.phone);\r\n  //       // enqueueSnackbar('Update success!');\r\n  //       navigate(paths.auth.jwt.otpVerify);\r\n  //     } else {\r\n  //       setErrorMsg('Passwords do not match');\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //     reset();\r\n  //     setErrorMsg(typeof error === 'string' ? error : error.response.data.message);\r\n  //     // enqueueSnackbar('Update success!');\r\n  //   }\r\n  // });\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      if (data.password === data.confirmPassword) {\r\n        const res = await register?.(\r\n          data.email,\r\n          data.password,\r\n          data.firstName,\r\n          data.lastName,\r\n          data.phone\r\n        );\r\n\r\n        if (res) {\r\n          enqueueSnackbar(\"Registration successful\");\r\n          navigate(paths.auth.jwt.otpVerify);\r\n        } else {\r\n          setErrorMsg(\"Registration failed\");\r\n        }\r\n      } else {\r\n        setErrorMsg(\"Passwords do not match\");\r\n      }\r\n    } catch (error) {\r\n      reset();\r\n      // const errorMessage =\r\n      //   typeof error === 'string' ? error : error.response?.data?.message || 'An error occurred';\r\n      // setErrorMsg(errorMessage);\r\n      enqueueSnackbar(error.response?.data?.message);\r\n    }\r\n  });\r\n\r\n  const renderHead = (\r\n    <Stack spacing={2} sx={{ mb: 5, position: \"relative\" }}>\r\n      <Typography variant=\"h4\">Get started absolutely free</Typography>\r\n\r\n      <Stack direction=\"row\" spacing={0.5}>\r\n        <Typography variant=\"body2\"> Already have an account? </Typography>\r\n\r\n        <Link\r\n          href={paths.auth.jwt.login}\r\n          component={RouterLink}\r\n          variant=\"subtitle2\"\r\n        >\r\n          Sign in\r\n        </Link>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  const renderTerms = (\r\n    <Typography\r\n      component=\"div\"\r\n      sx={{\r\n        color: \"text.secondary\",\r\n        mt: 2.5,\r\n        typography: \"caption\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      {\"By signing up, I agree to \"}\r\n      <Link underline=\"always\" color=\"text.primary\">\r\n        Terms of Service\r\n      </Link>\r\n      {\" and \"}\r\n      <Link underline=\"always\" color=\"text.primary\">\r\n        Privacy Policy\r\n      </Link>\r\n      .\r\n    </Typography>\r\n  );\r\n\r\n  const renderForm = (\r\n    <FormProvider methods={methods} onSubmit={onSubmit}>\r\n      <Stack spacing={2.5}>\r\n        {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n\r\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\r\n          <RHFTextField name=\"firstName\" label=\"First name\" />\r\n          <RHFTextField name=\"lastName\" label=\"Last name\" />\r\n        </Stack>\r\n\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <RHFTextField\r\n          name=\"phone\"\r\n          label=\"Phone Number\"\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <Select\r\n                  value={selectedCountry}\r\n                  onChange={(e) => setSelectedCountry(e.target.value)}\r\n                  sx={{\r\n                    padding: \"8px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    height: \"40px\",\r\n                    border: \"none\",\r\n                  }}\r\n                  renderValue={(value) => {\r\n                    // Use the value (which is the selected country code) to find the corresponding country\r\n                    const selectedCountryOption = countries.find(\r\n                      (country) => country.code === value\r\n                    );\r\n                    if (selectedCountryOption) {\r\n                      const { code } = selectedCountryOption;\r\n                      return (\r\n                        <Stack\r\n                          container\r\n                          alignItems=\"center\"\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            // justifyContent: 'center',\r\n                            // alignItems: 'center',\r\n                            flexDirection: \"row !important\",\r\n                          }}\r\n                        >\r\n                          <Grid item>\r\n                            <Iconify\r\n                              icon={`circle-flags:${code.toLowerCase()}`}\r\n                              width={28}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                          </Grid>\r\n                          {/* <Grid item>{`${code}`}</Grid> */}\r\n                        </Stack>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Country\r\n                  </MenuItem>\r\n                  {countries.map((country) => {\r\n                    const { code, label, phone } = country;\r\n                    return (\r\n                      <MenuItem key={code} value={code}>\r\n                        <Stack\r\n                          container\r\n                          alignItems=\"center\"\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            // justifyContent: 'center',\r\n                            // alignItems: 'center',\r\n                            flexDirection: \"row !important\",\r\n                          }}\r\n                        >\r\n                          <Grid item>\r\n                            <Iconify\r\n                              icon={`circle-flags:${code.toLowerCase()}`}\r\n                              width={28}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                          </Grid>\r\n                          <Grid item>{`${label} +${phone} `}</Grid>\r\n                        </Stack>\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={password.value ? \"text\" : \"password\"}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={password.onToggle} edge=\"end\">\r\n                  <Iconify\r\n                    icon={\r\n                      password.value\r\n                        ? \"solar:eye-bold\"\r\n                        : \"solar:eye-closed-bold\"\r\n                    }\r\n                  />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <RHFTextField\r\n          name=\"confirmPassword\"\r\n          label=\"Confirm Password\"\r\n          type={password.value ? \"text\" : \"password\"}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={password.onToggle} edge=\"end\">\r\n                  <Iconify\r\n                    icon={\r\n                      password.value\r\n                        ? \"solar:eye-bold\"\r\n                        : \"solar:eye-closed-bold\"\r\n                    }\r\n                  />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          color=\"inherit\"\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          loading={isSubmitting}\r\n        >\r\n          Create account\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {renderHead}\r\n\r\n      {renderForm}\r\n\r\n      {renderTerms}\r\n    </>\r\n  );\r\n}\r\n","import * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport customAxios from \"src/utils/customAxios\";\r\n// routes\r\nimport { paths } from \"src/routes/paths\";\r\nimport { useRouter } from \"src/routes/hooks\";\r\nimport { RouterLink } from \"src/routes/components\";\r\n\r\n// components\r\nimport Iconify from \"src/components/iconify\";\r\nimport FormProvider, { RHFTextField } from \"src/components/hook-form\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JWTForgotPasswordView() {\r\n  const router = useRouter();\r\n\r\n  const ForgotPasswordSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email must be a valid email address\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ForgotPasswordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    try {\r\n      const resData = await customAxios.post(\"/users/forget-password\", {\r\n        email: data.email,\r\n      });\r\n\r\n      const {\r\n        data: { authorization },\r\n      } = resData;\r\n\r\n      const searchParams = new URLSearchParams({\r\n        email: data.email,\r\n        authorization,\r\n      }).toString();\r\n\r\n      const href = `${paths.auth.jwt.resetPassword}?${searchParams}`;\r\n      // const href = paths.auth.jwt.verify;\r\n      router.push(href);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  });\r\n\r\n  const renderForm = (\r\n    <Stack spacing={3} alignItems=\"center\">\r\n      <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n      >\r\n        Send Request\r\n      </LoadingButton>\r\n\r\n      <Link\r\n        component={RouterLink}\r\n        href={paths.auth.jwt.login}\r\n        color=\"inherit\"\r\n        variant=\"subtitle2\"\r\n        sx={{\r\n          alignItems: \"center\",\r\n          display: \"inline-flex\",\r\n        }}\r\n      >\r\n        <Iconify icon=\"eva:arrow-ios-back-fill\" width={16} />\r\n        Return to sign in\r\n      </Link>\r\n    </Stack>\r\n  );\r\n\r\n  const renderHead = (\r\n    <>\r\n      {/* <PasswordIcon sx={{ height: 96 }} /> */}\r\n\r\n      <Stack spacing={1} sx={{ my: 5 }}>\r\n        <Typography variant=\"h3\">Forgot your password?</Typography>\r\n\r\n        <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\r\n          Enter your account&apos;s email, and we&apos;ll send a password reset\r\n          link.\r\n        </Typography>\r\n      </Stack>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={onSubmit}>\r\n      {renderHead}\r\n      {renderForm}\r\n    </FormProvider>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport Link from '@mui/material/Link';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport { useSnackbar } from 'src/components/snackbar';\r\n\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\nimport { useSearchParams } from 'src/routes/hooks';\r\nimport { RouterLink } from 'src/routes/components';\r\n\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\nimport FormProvider from 'src/components/hook-form';\r\nimport customAxios from 'src/utils/customAxios';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JWTResetPasswordView() {\r\n  const searchParams = useSearchParams();\r\n\r\n  const emailParamData = searchParams.get('email');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const authorizationParamData = searchParams.get('authorization');\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\r\n    newPassword: Yup.string().required('Password is required'),\r\n    confirmPassword: Yup.string().required('Password confirmation is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    newPassword: '',\r\n    confirmPassword: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ResetPasswordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n  const [resetSuccess, setResetSuccess] = useState(false);\r\n  const onSubmit = async (data) => {\r\n    setResetSuccess(false);\r\n\r\n    const requestData = {\r\n      email: emailParamData,\r\n      confirmPassword,\r\n      newPassword,\r\n    };\r\n\r\n    try {\r\n      if (newPassword === confirmPassword) {\r\n        const resData = await customAxios.post('/users/user-reset-password', requestData, {\r\n          headers: {\r\n            authorization: authorizationParamData,\r\n          },\r\n        });\r\n        setResetSuccess(true);\r\n        setConfirmPassword('');\r\n        setNewPassword('');\r\n        console.log(resData);\r\n      }\r\n    } catch (error) {\r\n      enqueueSnackbar(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  const renderForm = (\r\n    <Stack spacing={3} alignItems=\"center\">\r\n      <TextField\r\n        autoFocus\r\n        fullWidth\r\n        type=\"text\"\r\n        margin=\"dense\"\r\n        variant=\"outlined\"\r\n        label=\"New Password\"\r\n        value={newPassword}\r\n        onChange={(e) => setNewPassword(e.target.value)}\r\n      />\r\n\r\n      <TextField\r\n        autoFocus\r\n        fullWidth\r\n        type=\"email\"\r\n        margin=\"dense\"\r\n        variant=\"outlined\"\r\n        label=\"Confirm Password\"\r\n        value={confirmPassword}\r\n        onChange={(e) => setConfirmPassword(e.target.value)}\r\n      />\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        size=\"large\"\r\n        // type=\"submit\"\r\n        variant=\"contained\"\r\n        // loading={isSubmitting}\r\n        onClick={onSubmit}\r\n      >\r\n        Reset my password\r\n      </LoadingButton>\r\n\r\n      <Link\r\n        component={RouterLink}\r\n        href={paths.auth.jwt.login}\r\n        color=\"inherit\"\r\n        variant=\"subtitle2\"\r\n        sx={{\r\n          alignItems: 'center',\r\n          display: 'inline-flex',\r\n        }}\r\n      >\r\n        <Iconify icon=\"eva:arrow-ios-back-fill\" width={16} />\r\n        Return to sign in\r\n      </Link>\r\n    </Stack>\r\n  );\r\n\r\n  const renderHead = (\r\n    <Stack spacing={1} sx={{ my: 5 }}>\r\n      <Typography variant=\"h3\">Reset your password</Typography>\r\n    </Stack>\r\n  );\r\n\r\n  const renderSuccessMessage = (\r\n    <>\r\n      {/* <PasswordIcon sx={{ height: 96 }} /> */}\r\n\r\n      <Stack spacing={1} sx={{ my: 5 }}>\r\n        <Typography variant=\"h3\">Successful password reset</Typography>\r\n\r\n        <Typography variant=\"body5\" sx={{ color: 'text.secondary' }}>\r\n          You can now login to your account with your new password.\r\n        </Typography>\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          href={paths.auth.jwt.login}\r\n          sx={{ marginTop: '15px' }}\r\n        >\r\n          Login\r\n        </LoadingButton>\r\n      </Stack>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods}>\r\n      {/* {renderHead} */}\r\n      {resetSuccess ? (\r\n        renderSuccessMessage\r\n      ) : (\r\n        <>\r\n          {renderHead}\r\n          {renderForm}\r\n        </>\r\n      )}\r\n    </FormProvider>\r\n  );\r\n}\r\n","// @mui\r\nimport Box from \"@mui/material/Box\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\n// routes\r\nimport { paths } from \"src/routes/paths\";\r\nimport { useSearchParams } from \"src/routes/hooks\";\r\nimport { RouterLink } from \"src/routes/components\";\r\n// assets\r\nimport { EmailInboxIcon } from \"src/assets/icons\";\r\n// components\r\nimport Iconify from \"src/components/iconify\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function JwtVerifyView() {\r\n  const searchParams = useSearchParams();\r\n\r\n  const email = searchParams.get(\"email\");\r\n\r\n  const renderHead = (\r\n    <>\r\n      <EmailInboxIcon sx={{ mb: 5, height: 96 }} />\r\n\r\n      <Typography variant=\"h3\" sx={{ mb: 1 }}>\r\n        Please check your email!\r\n      </Typography>\r\n\r\n      <Stack\r\n        spacing={1}\r\n        sx={{ color: \"text.secondary\", typography: \"body2\", mb: 5 }}\r\n      >\r\n        <Box component=\"span\"> We have sent a confirmation link to</Box>\r\n        <Box component=\"strong\" sx={{ color: \"text.primary\" }}>\r\n          {email}\r\n        </Box>\r\n        <Box component=\"div\">Please check your inbox/spam.</Box>\r\n      </Stack>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {renderHead}\r\n\r\n      <Button\r\n        component={RouterLink}\r\n        href={paths.auth.jwt.login}\r\n        size=\"large\"\r\n        color=\"inherit\"\r\n        variant=\"contained\"\r\n        startIcon={<Iconify icon=\"eva:arrow-ios-back-fill\" />}\r\n        sx={{ alignSelf: \"center\" }}\r\n      >\r\n        Return to sign in\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n","import * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useState, useEffect, useContext, useRef } from \"react\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\n// routes\r\nimport { useLocation } from \"react-router\";\r\nimport { paths } from \"src/routes/paths\";\r\nimport { RouterLink } from \"src/routes/components\";\r\nimport { useSearchParams, useRouter } from \"src/routes/hooks\";\r\nimport { AuthContext } from \"src/auth/context/jwt\";\r\n\r\n// config\r\nimport { PATH_AFTER_LOGIN } from \"src/config-global\";\r\n// hooks\r\nimport { useBoolean } from \"src/hooks/use-boolean\";\r\nimport { useSnackbar } from \"src/components/snackbar\";\r\n\r\n// auth\r\nimport { useAuthContext } from \"src/auth/hooks\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"src/components/hook-form\";\r\nimport customAxios from \"src/utils/customAxios\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n// ... (imports)\r\n\r\nexport default function JwtOTPVerifyView() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const router = useRouter();\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n  const location = useLocation();\r\n  const isFromLoginPage =\r\n    new URLSearchParams(location.search).get(\"fromLoginPage\") === \"true\";\r\n  const searchParams = useSearchParams();\r\n  const returnTo = searchParams.get(\"returnTo\");\r\n\r\n  const STORAGE_EMAIL = \"email-temporary\";\r\n  const STORAGE_PHONE = \"user_phone\";\r\n  const STORAGE_NAME = \"user_name\";\r\n\r\n  const email = sessionStorage.getItem(STORAGE_EMAIL);\r\n  const phone = sessionStorage.getItem(STORAGE_PHONE);\r\n  const name = sessionStorage.getItem(STORAGE_NAME);\r\n\r\n  // Create refs for each input field\r\n  const firstDigitRef = useRef();\r\n  const secondDigitRef = useRef();\r\n  const thirdDigitRef = useRef();\r\n  const fourthDigitRef = useRef();\r\n\r\n  const LoginSchema = Yup.object().shape({\r\n    // firstDigit: Yup.string().required('Please enter digit'),\r\n    // secondDigit: Yup.string().required('Please enter digit'),\r\n    // thirdDigit: Yup.string().required('Please enter digit'),\r\n    // fourthDigit: Yup.string().required('Please enter digit'),\r\n  });\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(LoginSchema),\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n    watch,\r\n    setValue,\r\n  } = methods;\r\n\r\n  const handleInput = (fieldName, e) => {\r\n    const { value } = e.target;\r\n    // Use setValue to update the form value for the specific field\r\n    switch (fieldName) {\r\n      case \"firstDigit\":\r\n        setValue(\"firstDigit\", value);\r\n        if (value.length === 1) {\r\n          secondDigitRef.current.focus();\r\n        }\r\n        break;\r\n      case \"secondDigit\":\r\n        setValue(\"secondDigit\", value);\r\n        if (value.length === 1) {\r\n          thirdDigitRef.current.focus();\r\n        } else if (value.length === 0) {\r\n          firstDigitRef.current.focus();\r\n        }\r\n        break;\r\n      case \"thirdDigit\":\r\n        setValue(\"thirdDigit\", value);\r\n        if (value.length === 1) {\r\n          fourthDigitRef.current.focus();\r\n        } else if (value.length === 0) {\r\n          secondDigitRef.current.focus();\r\n        }\r\n        break;\r\n      case \"fourthDigit\":\r\n        setValue(\"fourthDigit\", value);\r\n        if (value.length === 1) {\r\n          firstDigitRef.current.focus();\r\n        } else if (value.length === 0) {\r\n          thirdDigitRef.current.focus();\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    const { firstDigit, secondDigit, thirdDigit, fourthDigit } = data;\r\n\r\n    try {\r\n      const res = await customAxios.post(\"/users/tests/verify-otp\", {\r\n        email,\r\n        otp: `${firstDigit}${secondDigit}${thirdDigit}${fourthDigit}`,\r\n      });\r\n\r\n      router.push(returnTo || paths.auth.jwt.login);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMsg(\r\n        typeof error === \"string\" ? error : error.response.data.message\r\n      );\r\n      enqueueSnackbar(\"There seem to be an issue verifying your account\", {\r\n        variant: \"error\",\r\n      });\r\n      reset();\r\n    }\r\n  });\r\n\r\n  const resendFunc = async () => {\r\n    const reqObject = {\r\n      email,\r\n      phoneNumber: phone,\r\n      name,\r\n    };\r\n    try {\r\n      const res = await customAxios.post(`/users/tests/resend-otp`, reqObject);\r\n      console.log(res);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isFromLoginPage) {\r\n      resendFunc();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const renderHead = (\r\n    <Stack spacing={2} sx={{ mb: 5, px: 1 }}>\r\n      <Typography variant=\"h4\">Verify Your Account</Typography>\r\n\r\n      <Stack direction=\"row\" spacing={0.5}>\r\n        <Typography variant=\"body2\" sx={{ width: \"100%\" }}>\r\n          We sent you a four-digit code. Enter the code to confirm your email.\r\n        </Typography>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  const renderForm = (\r\n    <Stack spacing={2.5}>\r\n      {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n\r\n      <Stack\r\n        sx={{ display: \"flex\", flexDirection: \"row\", gap: \"10px\", mb: \"15px\" }}\r\n      >\r\n        <RHFTextField\r\n          name=\"firstDigit\"\r\n          type=\"number\"\r\n          inputProps={{\r\n            inputMode: \"numeric\",\r\n            pattern: \"[0-9]\",\r\n            maxLength: 1,\r\n            style: {\r\n              textAlign: \"center\",\r\n              fontSize: \"16px\",\r\n              border: \"1px solid #00000040\",\r\n              borderRadius: \"8px\",\r\n            },\r\n            ref: firstDigitRef,\r\n          }}\r\n          onChange={(e) => handleInput(\"firstDigit\", e)}\r\n          required\r\n        />\r\n        <RHFTextField\r\n          name=\"secondDigit\"\r\n          type=\"number\"\r\n          inputProps={{\r\n            inputMode: \"numeric\",\r\n            pattern: \"[0-9]\",\r\n            maxLength: 1,\r\n            style: {\r\n              textAlign: \"center\",\r\n              fontSize: \"16px\",\r\n              border: \"1px solid #00000040\",\r\n              borderRadius: \"8px\",\r\n            },\r\n            ref: secondDigitRef,\r\n          }}\r\n          onChange={(e) => handleInput(\"secondDigit\", e)}\r\n          required\r\n        />\r\n        <RHFTextField\r\n          name=\"thirdDigit\"\r\n          type=\"number\"\r\n          inputProps={{\r\n            inputMode: \"numeric\",\r\n            pattern: \"[0-9]\",\r\n            maxLength: 1,\r\n            style: {\r\n              textAlign: \"center\",\r\n              fontSize: \"16px\",\r\n              border: \"1px solid #00000040\",\r\n              borderRadius: \"8px\",\r\n            },\r\n            ref: thirdDigitRef,\r\n          }}\r\n          onChange={(e) => handleInput(\"thirdDigit\", e)}\r\n          required\r\n        />\r\n        <RHFTextField\r\n          name=\"fourthDigit\"\r\n          type=\"number\"\r\n          inputProps={{\r\n            inputMode: \"numeric\",\r\n            pattern: \"[0-9]\",\r\n            maxLength: 1,\r\n            style: {\r\n              textAlign: \"center\",\r\n              fontSize: \"16px\",\r\n              border: \"1px solid #00000040\",\r\n              borderRadius: \"8px\",\r\n            },\r\n            ref: fourthDigitRef,\r\n          }}\r\n          onChange={(e) => handleInput(\"fourthDigit\", e)}\r\n          required\r\n        />\r\n      </Stack>\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        aria-label=\"Verify\"\r\n      >\r\n        Verify\r\n      </LoadingButton>\r\n\r\n      <Stack direction=\"row\" spacing={0.5}>\r\n        <Typography variant=\"body2\">Didn&apos;t receive a code?</Typography>\r\n\r\n        <Link component={RouterLink} onClick={resendFunc} variant=\"subtitle2\">\r\n          Resend\r\n        </Link>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={onSubmit}>\r\n      {renderHead}\r\n\r\n      {renderForm}\r\n    </FormProvider>\r\n  );\r\n}\r\n"],"names":["JwtLoginView","login","useAuthContext","enqueueSnackbar","useSnackbar","router","useRouter","_useState","useState","_useState2","_slicedToArray","errorMsg","password","useSearchParams","get","useBoolean","LoginSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","isSubmitting","formState","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","res","wrap","_context","prev","next","sent","onBoarding","push","paths","onboarding","dashboard","root","t0","response","message","stop","_x","apply","arguments","renderHead","_jsxs","Stack","spacing","sx","mb","children","_jsx","Typography","variant","direction","Link","component","RouterLink","href","auth","jwt","register","renderForm","Alert","severity","RHFTextField","name","label","type","value","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","Iconify","icon","color","underline","alignSelf","LoadingButton","fullWidth","size","loading","FormProvider","JwtRegisterView","setErrorMsg","navigate","useNavigate","_useState3","_useState4","selectedCountry","setSelectedCountry","RegisterSchema","firstName","lastName","confirmPassword","phone","matches","useEffect","selectedCountryData","countries","find","country","code","setValue","concat","_error$response","_error$response$data","otpVerify","renderTerms","mt","typography","textAlign","xs","sm","startAdornment","Select","onChange","e","target","padding","display","flexDirection","height","border","renderValue","selectedCountryOption","container","alignItems","Grid","item","toLowerCase","width","mr","MenuItem","disabled","map","_Fragment","JWTForgotPasswordView","ForgotPasswordSchema","resData","authorization","searchParams","customAxios","post","URLSearchParams","toString","resetPassword","console","error","my","JWTResetPasswordView","emailParamData","authorizationParamData","ResetPasswordSchema","newPassword","setNewPassword","setConfirmPassword","_useState5","_useState6","resetSuccess","setResetSuccess","requestData","headers","log","TextField","autoFocus","margin","renderSuccessMessage","marginTop","JwtVerifyView","EmailInboxIcon","Box","Button","startIcon","JwtOTPVerifyView","location","useLocation","isFromLoginPage","search","returnTo","sessionStorage","getItem","firstDigitRef","useRef","secondDigitRef","thirdDigitRef","fourthDigitRef","watch","handleInput","fieldName","length","current","focus","firstDigit","secondDigit","thirdDigit","fourthDigit","otp","resendFunc","_ref2","_callee2","reqObject","_context2","phoneNumber","px","gap","inputProps","inputMode","pattern","maxLength","style","fontSize","borderRadius","ref"],"sourceRoot":""}