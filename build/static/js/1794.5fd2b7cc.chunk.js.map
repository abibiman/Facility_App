{"version":3,"file":"static/js/1794.5fd2b7cc.chunk.js","mappings":"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","sources":["components/custom-breadcrumbs/link-item.js","components/custom-breadcrumbs/custom-breadcrumbs.js","sections/_examples/mui/data-grid-view/data-grid-basic.js","sections/_examples/mui/data-grid-view/data-grid-custom.js","sections/_examples/mui/data-grid-view/index.js","pages/components/mui/data-grid.js","utils/format-number.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\n// routes\r\nimport { RouterLink } from 'src/routes/components';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function BreadcrumbsLink({ link, activeLast, disabled }) {\r\n  const { name, href, icon } = link;\r\n\r\n  const styles = {\r\n    typography: 'body2',\r\n    alignItems: 'center',\r\n    color: 'text.primary',\r\n    display: 'inline-flex',\r\n    ...(disabled &&\r\n      !activeLast && {\r\n        cursor: 'default',\r\n        pointerEvents: 'none',\r\n        color: 'text.disabled',\r\n      }),\r\n  };\r\n\r\n  const renderContent = (\r\n    <>\r\n      {icon && (\r\n        <Box\r\n          component=\"span\"\r\n          sx={{\r\n            mr: 1,\r\n            display: 'inherit',\r\n            '& svg': { width: 20, height: 20 },\r\n          }}\r\n        >\r\n          {icon}\r\n        </Box>\r\n      )}\r\n\r\n      {name}\r\n    </>\r\n  );\r\n\r\n  if (href) {\r\n    return (\r\n      <Link component={RouterLink} href={href} sx={styles}>\r\n        {renderContent}\r\n      </Link>\r\n    );\r\n  }\r\n\r\n  return <Box sx={styles}> {renderContent} </Box>;\r\n}\r\n\r\nBreadcrumbsLink.propTypes = {\r\n  activeLast: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  link: PropTypes.shape({\r\n    href: PropTypes.string,\r\n    icon: PropTypes.node,\r\n    name: PropTypes.string,\r\n  }),\r\n};\r\n","import PropTypes from 'prop-types';\r\n// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\n//\r\nimport LinkItem from './link-item';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomBreadcrumbs({\r\n  links,\r\n  action,\r\n  heading,\r\n  moreLink,\r\n  activeLast,\r\n  sx,\r\n  ...other\r\n}) {\r\n  const lastLink = links[links.length - 1].name;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Stack\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        sx={{\r\n          '@media (max-width: 475px)': {\r\n            flexDirection: 'column',\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          {/* HEADING */}\r\n          {heading && (\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              {heading}\r\n            </Typography>\r\n          )}\r\n\r\n          {/* BREADCRUMBS */}\r\n          {!!links.length && (\r\n            <Breadcrumbs separator={<Separator />} {...other}>\r\n              {links.map((link) => (\r\n                <LinkItem\r\n                  key={link.name || ''}\r\n                  link={link}\r\n                  activeLast={activeLast}\r\n                  disabled={link.name === lastLink}\r\n                />\r\n              ))}\r\n            </Breadcrumbs>\r\n          )}\r\n        </Box>\r\n\r\n        {action && <Box sx={{ flexShrink: 0 }}> {action} </Box>}\r\n      </Stack>\r\n\r\n      {/* MORE LINK */}\r\n      {!!moreLink && (\r\n        <Box sx={{ mt: 2 }}>\r\n          {moreLink.map((href) => (\r\n            <Link\r\n              key={href}\r\n              href={href}\r\n              variant=\"body2\"\r\n              target=\"_blank\"\r\n              rel=\"noopener\"\r\n              sx={{ display: 'table' }}\r\n            >\r\n              {href}\r\n            </Link>\r\n          ))}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nCustomBreadcrumbs.propTypes = {\r\n  sx: PropTypes.object,\r\n  action: PropTypes.node,\r\n  links: PropTypes.array,\r\n  heading: PropTypes.string,\r\n  moreLink: PropTypes.array,\r\n  activeLast: PropTypes.bool,\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction Separator() {\r\n  return (\r\n    <Box\r\n      component=\"span\"\r\n      sx={{\r\n        width: 4,\r\n        height: 4,\r\n        borderRadius: '50%',\r\n        bgcolor: 'text.disabled',\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\n// @mui\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n// components\r\nimport Iconify from 'src/components/iconify';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst columns = [\r\n  {\r\n    field: 'id',\r\n    headerName: 'ID',\r\n    width: 120,\r\n  },\r\n  {\r\n    field: 'firstName',\r\n    headerName: 'First name',\r\n    width: 160,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: 'lastName',\r\n    headerName: 'Last name',\r\n    width: 160,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: 'age',\r\n    headerName: 'Age',\r\n    type: 'number',\r\n    width: 120,\r\n    editable: true,\r\n    align: 'center',\r\n    headerAlign: 'center',\r\n  },\r\n  {\r\n    field: 'fullName',\r\n    headerName: 'Full name',\r\n    description: 'This column has a value getter and is not sortable.',\r\n    flex: 1,\r\n    valueGetter: (params) => `${params.row.firstName || ''} ${params.row.lastName || ''}`,\r\n  },\r\n  {\r\n    field: 'action',\r\n    headerName: ' ',\r\n    width: 80,\r\n    align: 'right',\r\n    sortable: false,\r\n    disableColumnMenu: true,\r\n    renderCell: () => (\r\n      <IconButton>\r\n        <Iconify icon=\"eva:more-vertical-fill\" />\r\n      </IconButton>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function DataGridBasic({ data }) {\r\n  return <DataGrid columns={columns} rows={data} checkboxSelection disableRowSelectionOnClick />;\r\n}\r\n\r\nDataGridBasic.propTypes = {\r\n  data: PropTypes.array,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useCallback } from 'react';\r\n// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport Rating from '@mui/material/Rating';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { DataGrid, GridToolbar, getGridNumericOperators } from '@mui/x-data-grid';\r\n// utils\r\nimport { fPercent } from 'src/utils/format-number';\r\n// components\r\nimport Label from 'src/components/label';\r\nimport Iconify from 'src/components/iconify';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst columns = [\r\n  {\r\n    field: 'id',\r\n  },\r\n  {\r\n    field: 'avatar',\r\n    headerName: 'Avatar',\r\n    align: 'center',\r\n    headerAlign: 'center',\r\n    width: 64,\r\n    sortable: false,\r\n    filterable: false,\r\n    disableColumnMenu: true,\r\n    renderCell: (params) => (\r\n      <Avatar alt={params.row.name} sx={{ width: 36, height: 36 }}>\r\n        {params.row.name.charAt(0).toUpperCase()}\r\n      </Avatar>\r\n    ),\r\n  },\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    flex: 1,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: 'email',\r\n    headerName: 'Email',\r\n    flex: 1,\r\n    editable: true,\r\n    renderCell: (params) => (\r\n      <Typography variant=\"body2\" sx={{ textDecoration: 'underline' }} noWrap>\r\n        {params.row.email}\r\n      </Typography>\r\n    ),\r\n  },\r\n  {\r\n    field: 'lastLogin',\r\n    type: 'dateTime',\r\n    headerName: 'Last login',\r\n    align: 'right',\r\n    headerAlign: 'right',\r\n    width: 200,\r\n  },\r\n  {\r\n    field: 'rating',\r\n    type: 'number',\r\n    headerName: 'Rating',\r\n    width: 160,\r\n    disableColumnMenu: true,\r\n    renderCell: (params) => (\r\n      <Rating size=\"small\" value={params.row.rating} precision={0.5} readOnly />\r\n    ),\r\n  },\r\n  {\r\n    field: 'status',\r\n    type: 'singleSelect',\r\n    headerName: 'Status',\r\n    valueOptions: ['online', 'alway', 'busy'],\r\n    align: 'center',\r\n    headerAlign: 'center',\r\n    width: 120,\r\n    renderCell: (params) => (\r\n      <Label\r\n        variant=\"soft\"\r\n        color={\r\n          (params.row.status === 'busy' && 'error') ||\r\n          (params.row.status === 'alway' && 'warning') ||\r\n          'success'\r\n        }\r\n        sx={{ mx: 'auto' }}\r\n      >\r\n        {params.row.status}\r\n      </Label>\r\n    ),\r\n  },\r\n  {\r\n    field: 'isAdmin',\r\n    type: 'boolean',\r\n    align: 'center',\r\n    headerAlign: 'center',\r\n    width: 120,\r\n\r\n    renderCell: (params) =>\r\n      params.row.isAdmin ? (\r\n        <Iconify icon=\"eva:checkmark-circle-2-fill\" sx={{ color: 'primary.main' }} />\r\n      ) : (\r\n        '-'\r\n      ),\r\n  },\r\n  {\r\n    field: 'performance',\r\n    type: 'number',\r\n    headerName: 'Performance',\r\n    align: 'center',\r\n    headerAlign: 'center',\r\n    width: 160,\r\n    renderCell: (params) => (\r\n      <Stack spacing={1} direction=\"row\" alignItems=\"center\" sx={{ px: 1, width: 1, height: 1 }}>\r\n        <LinearProgress\r\n          value={params.row.performance}\r\n          variant=\"determinate\"\r\n          color={\r\n            (params.row.performance < 30 && 'error') ||\r\n            (params.row.performance > 30 && params.row.performance < 70 && 'warning') ||\r\n            'primary'\r\n          }\r\n          sx={{ width: 1, height: 6 }}\r\n        />\r\n        <Typography variant=\"caption\" sx={{ width: 80 }}>\r\n          {fPercent(params.row.performance)}\r\n        </Typography>\r\n      </Stack>\r\n    ),\r\n  },\r\n  {\r\n    field: 'action',\r\n    headerName: ' ',\r\n    align: 'right',\r\n    width: 80,\r\n    sortable: false,\r\n    filterable: false,\r\n    disableColumnMenu: true,\r\n    renderCell: (params) => (\r\n      <IconButton onClick={() => console.info('ID', params.row.id)}>\r\n        <Iconify icon=\"eva:more-vertical-fill\" />\r\n      </IconButton>\r\n    ),\r\n  },\r\n];\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function DataGridCustom({ data }) {\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  const [columnVisibilityModel, setColumnVisibilityModel] = useState({\r\n    id: false,\r\n  });\r\n\r\n  if (columns.length) {\r\n    const ratingColumn = columns.find((column) => column.field === 'rating');\r\n\r\n    const ratingColIndex = columns.findIndex((col) => col.field === 'rating');\r\n\r\n    const ratingFilterOperators = getGridNumericOperators().map((operator) => ({\r\n      ...operator,\r\n      InputComponent: RatingInputValue,\r\n    }));\r\n    columns[ratingColIndex] = {\r\n      ...ratingColumn,\r\n      filterOperators: ratingFilterOperators,\r\n    };\r\n  }\r\n\r\n  const handleChangeColumnVisibilityModel = useCallback((newModel) => {\r\n    setColumnVisibilityModel(newModel);\r\n  }, []);\r\n\r\n  const hiddenFields = ['id', 'action'];\r\n\r\n  const getTogglableColumns = () =>\r\n    columns.filter((column) => !hiddenFields.includes(column.field)).map((column) => column.field);\r\n\r\n  const selected = data.filter((row) => selectedRows.includes(row.id));\r\n\r\n  console.info('SELECTED ROWS', selected);\r\n\r\n  return (\r\n    <DataGrid\r\n      checkboxSelection\r\n      disableRowSelectionOnClick\r\n      rows={data}\r\n      columns={columns}\r\n      onRowSelectionModelChange={(newSelectionModel) => {\r\n        setSelectedRows(newSelectionModel);\r\n      }}\r\n      columnVisibilityModel={columnVisibilityModel}\r\n      onColumnVisibilityModelChange={handleChangeColumnVisibilityModel}\r\n      slots={{\r\n        toolbar: GridToolbar,\r\n      }}\r\n      slotProps={{\r\n        columnsPanel: {\r\n          getTogglableColumns,\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nDataGridCustom.propTypes = {\r\n  data: PropTypes.array,\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction RatingInputValue({ item, applyValue }) {\r\n  return (\r\n    <Box sx={{ p: 1, height: 1, alignItems: 'flex-end', display: 'flex' }}>\r\n      <Rating\r\n        size=\"small\"\r\n        precision={0.5}\r\n        placeholder=\"Filter value\"\r\n        value={Number(item.value)}\r\n        onChange={(event, newValue) => {\r\n          applyValue({ ...item, value: newValue });\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nRatingInputValue.propTypes = {\r\n  applyValue: PropTypes.func,\r\n  item: PropTypes.object,\r\n};\r\n","// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Container from '@mui/material/Container';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Typography from '@mui/material/Typography';\r\n// routes\r\nimport { paths } from 'src/routes/paths';\r\n// _mock\r\nimport { _mock } from 'src/_mock';\r\n// components\r\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\r\n//\r\nimport DataGridBasic from './data-grid-basic';\r\nimport DataGridCustom from './data-grid-custom';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst _dataGrid = [...Array(20)].map((_, index) => {\r\n  const status =\r\n    (index % 2 && 'online') || (index % 3 && 'alway') || (index % 4 && 'busy') || 'offline';\r\n\r\n  return {\r\n    id: _mock.id(index),\r\n    status,\r\n    email: _mock.email(index),\r\n    name: _mock.fullName(index),\r\n    age: _mock.number.age(index),\r\n    lastLogin: _mock.time(index),\r\n    isAdmin: _mock.boolean(index),\r\n    lastName: _mock.lastName(index),\r\n    rating: _mock.number.rating(index),\r\n    firstName: _mock.firstName(index),\r\n    performance: _mock.number.percent(index),\r\n  };\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function DataGridView() {\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          py: 5,\r\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\r\n        }}\r\n      >\r\n        <Container>\r\n          <CustomBreadcrumbs\r\n            heading=\"DataGrid\"\r\n            links={[\r\n              {\r\n                name: 'Components',\r\n                href: paths.components,\r\n              },\r\n              { name: 'DataGrid' },\r\n            ]}\r\n            moreLink={['https://mui.com/x/react-data-grid/']}\r\n            sx={{ mb: 0 }}\r\n          />\r\n\r\n          <Typography variant=\"body2\" sx={{ my: 3 }}>\r\n            This component includes 2 <strong>Free</strong> and <strong>Paid</strong> versions from\r\n            MUI.\r\n            <br />\r\n            Paid version will have more features. Please read more{' '}\r\n            <Link href=\"https://mui.com/x/react-data-grid/\" target=\"_blank\" rel=\"noopener\">\r\n              here\r\n            </Link>\r\n          </Typography>\r\n        </Container>\r\n      </Box>\r\n\r\n      <Container sx={{ my: 10 }}>\r\n        <Stack spacing={5}>\r\n          <Card>\r\n            <CardHeader title=\"Basic\" sx={{ mb: 2 }} />\r\n            <Box sx={{ height: 390 }}>\r\n              <DataGridBasic data={_dataGrid} />\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader title=\"Custom\" sx={{ mb: 2 }} />\r\n            <Box sx={{ height: 720 }}>\r\n              <DataGridCustom data={_dataGrid} />\r\n            </Box>\r\n          </Card>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport DataGridView from 'src/sections/_examples/mui/data-grid-view';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function DataGridPage() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> MUI: DataGrid</title>\r\n      </Helmet>\r\n\r\n      <DataGridView />\r\n    </>\r\n  );\r\n}\r\n","import numeral from 'numeral';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fCurrency(number) {\r\n  const format = number ? numeral(number).format('$0,0.00') : '';\r\n\r\n  return result(format, '.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  const format = number ? numeral(Number(number) / 100).format('0.0%') : '';\r\n\r\n  return result(format, '.0');\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  const format = number ? numeral(number).format('0.00a') : '';\r\n\r\n  return result(format, '.00');\r\n}\r\n\r\nexport function fData(number) {\r\n  const format = number ? numeral(number).format('0.0 b') : '';\r\n\r\n  return result(format, '.0');\r\n}\r\n\r\nfunction result(format, key = '.00') {\r\n  const isInteger = format.includes(key);\r\n\r\n  return isInteger ? format.replace(key, '') : format;\r\n}\r\n"],"names":["BreadcrumbsLink","_ref","link","activeLast","disabled","name","href","icon","styles","_objectSpread","typography","alignItems","color","display","cursor","pointerEvents","renderContent","_jsxs","_Fragment","children","_jsx","Box","component","sx","mr","width","height","Link","RouterLink","CustomBreadcrumbs","links","action","heading","moreLink","other","_objectWithoutProperties","_excluded","lastLink","length","Stack","direction","flexDirection","flexGrow","Typography","variant","gutterBottom","Breadcrumbs","separator","Separator","map","LinkItem","flexShrink","mt","target","rel","borderRadius","bgcolor","columns","field","headerName","editable","type","align","headerAlign","description","flex","valueGetter","params","concat","row","firstName","lastName","sortable","disableColumnMenu","renderCell","IconButton","Iconify","DataGridBasic","data","DataGrid","rows","checkboxSelection","disableRowSelectionOnClick","filterable","Avatar","alt","charAt","toUpperCase","textDecoration","noWrap","email","Rating","size","value","rating","precision","readOnly","valueOptions","Label","status","mx","isAdmin","spacing","px","LinearProgress","performance","fPercent","onClick","console","info","id","DataGridCustom","_useState","useState","_useState2","_slicedToArray","selectedRows","setSelectedRows","_useState3","_useState4","columnVisibilityModel","setColumnVisibilityModel","ratingColumn","find","column","ratingColIndex","findIndex","col","ratingFilterOperators","getGridNumericOperators","operator","InputComponent","RatingInputValue","filterOperators","handleChangeColumnVisibilityModel","useCallback","newModel","hiddenFields","selected","filter","includes","onRowSelectionModelChange","newSelectionModel","onColumnVisibilityModelChange","slots","toolbar","GridToolbar","slotProps","columnsPanel","getTogglableColumns","_ref2","item","applyValue","p","placeholder","Number","onChange","event","newValue","_dataGrid","_toConsumableArray","Array","_","index","_mock","fullName","age","number","lastLogin","time","boolean","percent","DataGridView","py","theme","palette","mode","Container","paths","components","mb","my","Card","CardHeader","title","DataGridPage","Helmet","fNumber","numeral","format","fCurrency","result","fShortenNumber","fData","key","arguments","undefined","replace"],"sourceRoot":""}